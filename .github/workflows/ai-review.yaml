name: Devin Code Review

on:
  pull_request:
    types: [opened, synchronize, edited]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  code-review:
    runs-on: ubuntu-latest
    env:
      DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Check PR body for devin-review
        run: |
          echo "PR body: ${{ github.event.pull_request.body }}"
          # devin-reviewを含む場合、または空白の場合（デフォルト）でもレビューを実行
          echo "Contains devin-review: ${{ contains(github.event.pull_request.body, 'devin-review') || github.event.pull_request.body == '' }}"

      - name: Devin review combined
        # skip-reviewがない限り常に実行
        if: "!contains(github.event.pull_request.body, 'skip-review')"
        run: |
          echo "Starting Devin review process..."
          
          # GitHub CLIが利用可能か確認
          if ! command -v gh &> /dev/null; then
            echo "GitHub CLI not found"
            exit 1
          fi
          
          # セッションIDの抽出を修正
          session_comment=$(gh pr view "${{ github.event.number }}" --json comments --jq '.comments[] | select(.body | contains("Devin Session ID:")) | .body' | head -n 1)

          check_session_status() {
            local session_id="$1"
            echo "Checking session status: $session_id"
            local response
            response=$(curl -s -X GET "https://api.devin.ai/v1/session/${session_id}" \
              -H "Authorization: Bearer $DEVIN_API_KEY")
            
            local status
            status=$(echo "$response" | jq -r '.status // "unknown"')
            echo "Session status: $status"
            echo "$status"
          }

          get_session_messages() {
            local session_id="$1"
            echo "Getting messages from session: $session_id"
            local response
            response=$(curl -s -X GET "https://api.devin.ai/v1/session/${session_id}/messages" \
              -H "Authorization: Bearer $DEVIN_API_KEY")
            echo "$response"
          }

          create_session() {
            local prompt="$1"
            echo "Creating new Devin session..."
            local response
            response=$(curl -s -w "\n%{http_code}" -X POST "https://api.devin.ai/v1/sessions" \
              -H "Authorization: Bearer $DEVIN_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{
                \"prompt\": \"$prompt\",
                \"playbook_id\": \"playbook-f5454a9ea542482e8805ec43bf8ab201\"
              }")
            local http_status
            http_status=$(echo "$response" | tail -n 1)
            echo "Request info: status code = $http_status"
            if [ "$http_status" -ne 200 ]; then
              echo "Failed to create session: $response"
              exit 1
            fi
            local http_body
            http_body=$(echo "$response" | sed '$d')
            local session_id
            session_id=$(echo "$http_body" | jq -r '.session_id')
            if [ -z "$session_id" ] || [ "$session_id" = "null" ]; then
              echo "Failed to get session ID, body = $http_body"
              exit 1
            fi
            echo "Session created with ID: $session_id"
            gh pr comment "${{ github.event.number }}" --body "Devin Session ID: $session_id"
          }

          update_session() {
            local session_id="$1"
            local message="$2"
            echo "Updating Devin session: $session_id"
            
            # まずセッションの状態を確認
            local session_status
            session_status=$(check_session_status "$session_id")
            
            if [ "$session_status" = "exited" ] || [ "$session_status" = "completed" ]; then
              echo "Session has already exited/completed. Skipping update."
              return 0
            fi
            
            local escaped_message=$(echo "$message" | jq -R -s .)
            local response
            response=$(curl -s -w "\n%{http_code}" -X POST "https://api.devin.ai/v1/session/${session_id}/message" \
              -H "Authorization: Bearer $DEVIN_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{\"message\": $escaped_message}")
            local http_status
            http_status=$(echo "$response" | tail -n 1)
            echo "Request info: status code = $http_status"
            if [ "$http_status" -ne 200 ]; then
              echo "Failed to update session: $response"
              # セッションが既に終了している場合はエラーにしない
              if [[ "$response" == *"already exited"* ]]; then
                echo "Session already exited, continuing..."
                return 0
              fi
              exit 1
            fi
            echo "Session updated successfully"
          }

          # より詳細で構造化された指示を追加
          instructions=
          
          "Code Review Task:

          このプルリクエストの包括的なコードレビューを実行してください。

          リポジトリ: ${{ github.repository }}
          PR番号: #${{ github.event.number }}
          PRタイトル: ${{ github.event.pull_request.title }}

          レビュー重点項目:
          1. コード品質: コードスタイル、可読性、保守性をチェック
          2. バグ検出: 潜在的なバグ、ロジックエラー、エッジケースを特定
          3. セキュリティ分析: セキュリティ脆弱性や安全でない慣行を確認
          4. パフォーマンス: 変更のパフォーマンスへの影響を評価
          5. ベストプラクティス: 言語固有のベストプラクティスへの準拠を確認
          6. ドキュメント: 変更にドキュメント更新が必要かチェック

          以下を提供してください:
          - 該当する場合は行ごとの具体的なフィードバック
          - 変更の全体的な評価
          - 改善提案
          - リスク評価（低/中/高）

          日本語で回答し、分析を徹底的に行ってください。"

          if [ -z "$session_comment" ]; then
            create_session "$instructions"
          else
            # セッションID抽出の修正
            session_id=$(echo "$session_comment" | sed -n 's/.*Devin Session ID: \([^ ]*\).*/\1/p')
            if [ -z "$session_id" ]; then
              echo "Failed to extract session ID from comment: $session_comment"
              exit 1
            fi
            
            # 既存セッションがある場合でも、まず状態をチェック
            session_status=$(check_session_status "$session_id")
            if [ "$session_status" = "exited" ] || [ "$session_status" = "completed" ]; then
              echo "Previous session has completed. Creating new session..."
              create_session "$instructions"
            else
              update_session "$session_id" "$instructions"
            fi
          fi
          
  slack-notification:
    runs-on: ubuntu-latest
    needs: code-review
    if: always() && !contains(github.event.pull_request.body, 'skip-review')
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Get Devin session results
        id: get-results
        run: |
          echo "Getting Devin session results..."
          
          # Webhook URLの存在確認
          if [ -z "$SLACK_WEBHOOK_URL" ]; then
            echo "SLACK_WEBHOOK_URL is not set"
            exit 1
          fi
          
          # セッションIDの取得を修正
          session_comment=$(gh pr view "${{ github.event.number }}" --json comments --jq '.comments[] | select(.body | contains("Devin Session ID:")) | .body' | tail -n 1)
          session_id=$(echo "$session_comment" | sed -n 's/.*Devin Session ID: \([^ ]*\).*/\1/p')
          
          if [ -z "$session_id" ]; then
            echo "Failed to extract session ID"
            echo "results=Devin session not found or failed to start" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Found session ID: $session_id"
          
          # セッション結果の取得（より長い待機時間とリトライ）
          for i in {1..6}; do
            echo "Attempt $i to get session results..."
            
            # セッション状態を確認
            status_response=$(curl -s -X GET "https://api.devin.ai/v1/session/${session_id}" \
              -H "Authorization: Bearer ${{ secrets.DEVIN_API_KEY }}")
            session_status=$(echo "$status_response" | jq -r '.status // "unknown"')
            echo "Session status: $session_status"
            
            # メッセージを取得
            response=$(curl -s -X GET "https://api.devin.ai/v1/session/${session_id}/messages" \
              -H "Authorization: Bearer ${{ secrets.DEVIN_API_KEY }}")
            
            if [ $? -eq 0 ] && [ -n "$response" ]; then
              # メッセージが存在するかチェック
              message_count=$(echo "$response" | jq '.messages | length' 2>/dev/null || echo "0")
              echo "Found $message_count messages"
              
              if [ "$message_count" -gt 1 ]; then
                # Devinからの応答があるかチェック（最初のメッセージはプロンプト）
                last_message=$(echo "$response" | jq -r '.messages[-1].content // "No content"')
                second_last_message=$(echo "$response" | jq -r '.messages[-2].content // "No content"')
                
                # 最後のメッセージがプロンプトと異なる場合、Devinからの応答とみなす
                if [ "$last_message" != "$second_last_message" ] && [ ${#last_message} -gt 50 ]; then
                  echo "Found meaningful response from Devin"
                  break
                fi
              fi
            fi
            
            # セッションが完了している場合は、より短い間隔で再試行
            if [ "$session_status" = "completed" ] || [ "$session_status" = "exited" ]; then
              sleep 10
            else
              sleep 30
            fi
            
            if [ $i -eq 6 ]; then
              echo "Failed to get meaningful session results after 6 attempts"
              echo "Raw response: $response"
              echo "results=Devin AIからの応答を取得できませんでした。セッション状態: $session_status" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          
          # 最も関連性の高いメッセージを取得（最後のメッセージまたは最長のメッセージ）
          results=$(echo "$response" | jq -r '
            .messages 
            | map(select(.content != null and (.content | length) > 20))
            | if length > 1 then .[-1].content else .[0].content end
            // "応答を処理中です。しばらく後に再度確認してください。"
          ')
          
          echo "Final results length: ${#results}"
          echo "Results preview: ${results:0:200}..."
          
          # マルチライン出力の安全な設定
          {
            echo "results<<EOF"
            echo "$results"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Send to Slack
        run: |
          echo "Sending notification to Slack..."
          
          # JSONペイロードを安全に作成
          jq -n \
            --arg text "Devin AI Code Review Results for PR #${{ github.event.number }}" \
            --arg pr_url "${{ github.event.pull_request.html_url }}" \
            --arg pr_number "${{ github.event.number }}" \
            --arg pr_title "${{ github.event.pull_request.title }}" \
            --arg results "${{ steps.get-results.outputs.results }}" \
            '{
              text: $text,
              blocks: [
                {
                  type: "section",
                  text: {
                    type: "mrkdwn",
                    text: ("*PR:* <" + $pr_url + "|#" + $pr_number + " - " + $pr_title + ">")
                  }
                },
                {
                  type: "section",
                  text: {
                    type: "mrkdwn",
                    text: ("*Devin AI Review:*\n```\n" + $results + "\n```")
                  }
                }
              ]
            }' > slack_payload.json
          
          # Slack APIへの送信
          response=$(curl -s -w "\n%{http_code}" -X POST \
            -H 'Content-type: application/json' \
            --data @slack_payload.json \
            "$SLACK_WEBHOOK_URL")
          
          http_status=$(echo "$response" | tail -n 1)
          
          if [ "$http_status" -eq 200 ]; then
            echo "Slack notification sent successfully"
          else
            echo "Failed to send Slack notification. Status: $http_status"
            echo "Response: $(echo "$response" | sed '$d')"
            exit 1
          fi