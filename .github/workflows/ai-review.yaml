name: Devin Code Review

on:
  pull_request:
    types: [opened, synchronize, edited]

jobs:
  code-review:
    runs-on: ubuntu-latest
    env:
      DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Devin review combined
        if: contains(github.event.pull_request.body, 'devin-review')
        run: |
          # セッションIDの抽出を修正
          session_comment=$(gh pr view "${{ github.event.number }}" --json comments --jq '.comments[] | select(.body | contains("Devin Session ID:")) | .body' | head -n 1)

          create_session() {
            local prompt="$1"
            local response
            response=$(curl -s -w "\n%{http_code}" -X POST "https://api.devin.ai/v1/sessions" \
              -H "Authorization: Bearer $DEVIN_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{\"prompt\": \"$prompt\"}")
            local http_status
            http_status=$(echo "$response" | tail -n 1)
            echo "Request info: status code = $http_status"
            if [ "$http_status" -ne 200 ]; then
              echo "Failed to create session: $response"
              exit 1
            fi
            local http_body
            http_body=$(echo "$response" | sed '$d')
            local session_id
            session_id=$(echo "$http_body" | jq -r '.session_id')
            if [ -z "$session_id" ] || [ "$session_id" = "null" ]; then
              echo "Failed to get session ID, body = $http_body"
              exit 1
            fi
            gh pr comment "${{ github.event.number }}" --body "Devin Session ID: $session_id"
          }

          update_session() {
            local session_id="$1"
            local message="$2"
            local response
            response=$(curl -s -w "\n%{http_code}" -X POST "https://api.devin.ai/v1/session/${session_id}/message" \
              -H "Authorization: Bearer $DEVIN_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{\"message\": \"$message\"}")
            local http_status
            http_status=$(echo "$response" | tail -n 1)
            echo "Request info: status code = $http_status"
            if [ "$http_status" -ne 200 ]; then
              echo "Failed to update session: $response"
              exit 1
            fi
          }

          instructions="【レビュー時の指示】
          1. コードの変更点を確認してください。
          2. 潜在的なバグや改善点を指摘してください。
          3. コーディング規約に従っているか確認してください。"

          if [ -z "$session_comment" ]; then
            create_session "$instructions"
          else
            # セッションID抽出の修正
            session_id=$(echo "$session_comment" | sed -n 's/.*Devin Session ID: \([^ ]*\).*/\1/p')
            if [ -z "$session_id" ]; then
              echo "Failed to extract session ID from comment: $session_comment"
              exit 1
            fi
            update_session "$session_id" "$instructions"
          fi
          
  slack-notification:
    runs-on: ubuntu-latest
    needs: code-review
    if: contains(github.event.pull_request.body, 'devin-review')
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLCAK_SELF_CHANNEL }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Get Devin session results
        id: get-results
        run: |
          # Webhook URLの存在確認
          if [ -z "$SLACK_WEBHOOK_URL" ]; then
            echo "SLACK_WEBHOOK_URL is not set"
            exit 1
          fi
          
          # セッションIDの取得を修正
          session_comment=$(gh pr view "${{ github.event.number }}" --json comments --jq '.comments[] | select(.body | contains("Devin Session ID:")) | .body' | head -n 1)
          session_id=$(echo "$session_comment" | sed -n 's/.*Devin Session ID: \([^ ]*\).*/\1/p')
          
          if [ -z "$session_id" ]; then
            echo "Failed to extract session ID"
            exit 1
          fi
          
          # セッション結果の取得
          response=$(curl -s -X GET "https://api.devin.ai/v1/session/${session_id}/messages" \
            -H "Authorization: Bearer ${{ secrets.DEVIN_API_KEY }}")
          
          if [ $? -ne 0 ]; then
            echo "Failed to get session results"
            exit 1
          fi
          
          # JSONエスケープ処理を追加
          results=$(echo "$response" | jq -r '.messages[-1].content // "No results available"' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          
          echo "results<<EOF" >> $GITHUB_OUTPUT
          echo "$results" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send to Slack
        run: |
          # JSONペイロードをファイルに保存してエスケープ問題を回避
          cat > slack_payload.json << EOF
          {
            "text": "Devin AI Code Review Results for PR #${{ github.event.number }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*PR:* <${{ github.event.pull_request.html_url }}|#${{ github.event.number }} - ${{ github.event.pull_request.title }}>"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Devin AI Review:*\n\`\`\`${{ steps.get-results.outputs.results }}\`\`\`"
                }
              }
            ]
          }
          EOF
          
          curl -X POST -H 'Content-type: application/json' \
            --data @slack_payload.json \
            $SLACK_WEBHOOK_URL
          
          if [ $? -eq 0 ]; then
            echo "Slack notification sent successfully"
          else
            echo "Failed to send Slack notification"
            exit 1
          fi