name: Devin Code Review

on:
  pull_request:
    types: [opened, synchronize, edited]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  code-review:
    runs-on: ubuntu-latest
    env:
      DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Check PR body for devin-review
        run: |
          echo "PR body: ${{ github.event.pull_request.body }}"
          # devin-reviewを含む場合、または空白の場合（デフォルト）でもレビューを実行
          echo "Contains devin-review: ${{ contains(github.event.pull_request.body, 'devin-review') || github.event.pull_request.body == '' }}"

      - name: Devin review combined
        # skip-reviewがない限り常に実行
        if: "!contains(github.event.pull_request.body, 'skip-review')"
        run: |
          echo "Starting Devin review process..."
          
          # GitHub CLIが利用可能か確認
          if ! command -v gh &> /dev/null; then
            echo "GitHub CLI not found"
            exit 1
          fi
          
          # セッションIDの抽出を修正
          session_comment=$(gh pr view "${{ github.event.number }}" --json comments --jq '.comments[] | select(.body | contains("Devin Session ID:")) | .body' | head -n 1)

          check_session_status() {
            local session_id="$1"
            echo "Checking session status: $session_id"
            local response
            response=$(curl -s -X GET "https://api.devin.ai/v1/session/${session_id}" \
              -H "Authorization: Bearer $DEVIN_API_KEY")
            
            local status
            status=$(echo "$response" | jq -r '.status // "unknown"')
            echo "Session status: $status"
            echo "$status"
          }

          create_session() {
            local prompt="$1"
            echo "Creating new Devin session..."
            local escaped_prompt=$(echo "$prompt" | jq -R -s .)
            local response
            response=$(curl -s -w "\n%{http_code}" -X POST "https://api.devin.ai/v1/sessions" \
              -H "Authorization: Bearer $DEVIN_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{
                \"prompt\": $escaped_prompt,
                \"playbook_id\": \"playbook-f5454a9ea542482e8805ec43bf8ab201\"
              }")
            local http_status
            http_status=$(echo "$response" | tail -n 1)
            echo "Request info: status code = $http_status"
            if [ "$http_status" -ne 200 ]; then
              echo "Failed to create session: $response"
              exit 1
            fi
            local http_body
            http_body=$(echo "$response" | sed '$d')
            local session_id
            session_id=$(echo "$http_body" | jq -r '.session_id')
            if [ -z "$session_id" ] || [ "$session_id" = "null" ]; then
              echo "Failed to get session ID, body = $http_body"
              exit 1
            fi
            echo "Session created with ID: $session_id"
            gh pr comment "${{ github.event.number }}" --body "Devin Session ID: $session_id"
          }

          update_session() {
            local session_id="$1"
            local message="$2"
            echo "Updating Devin session: $session_id"
            
            # まずセッションの状態を確認
            local session_status
            session_status=$(check_session_status "$session_id")
            
            if [ "$session_status" = "exited" ] || [ "$session_status" = "completed" ]; then
              echo "Session has already exited/completed. Creating new session instead."
              create_session "$message"
              return 0
            fi
            
            local escaped_message=$(echo "$message" | jq -R -s .)
            local response
            response=$(curl -s -w "\n%{http_code}" -X POST "https://api.devin.ai/v1/session/${session_id}/message" \
              -H "Authorization: Bearer $DEVIN_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{\"message\": $escaped_message}")
            local http_status
            http_status=$(echo "$response" | tail -n 1)
            echo "Request info: status code = $http_status"
            if [ "$http_status" -ne 200 ]; then
              echo "Failed to update session: $response"
              # セッションが既に終了している場合は新しいセッションを作成
              if [[ "$response" == *"already exited"* ]]; then
                echo "Session already exited, creating new session..."
                create_session "$message"
                return 0
              fi
              exit 1
            fi
            echo "Session updated successfully"
          }

          # より詳細で構造化された指示
          instructions="Code Review Task: Please perform a comprehensive code review of this Pull Request. Repository: ${{ github.repository }}, PR Number: #${{ github.event.number }}, PR Title: ${{ github.event.pull_request.title }}. Review Focus Areas: 1. Code Quality: Check for code style, readability, and maintainability 2. Bug Detection: Identify potential bugs, logic errors, or edge cases 3. Security Analysis: Look for security vulnerabilities or unsafe practices 4. Performance: Evaluate performance implications of the changes 5. Best Practices: Ensure adherence to language-specific best practices 6. Documentation: Check if changes need documentation updates. Please provide: - Specific line-by-line feedback where applicable - Overall assessment of the changes - Suggestions for improvement - Risk assessment (Low/Medium/High). Respond in Japanese and be thorough in your analysis."

          if [ -z "$session_comment" ]; then
            create_session "$instructions"
          else
            # セッションID抽出の修正
            session_id=$(echo "$session_comment" | sed -n 's/.*Devin Session ID: \([^ ]*\).*/\1/p')
            if [ -z "$session_id" ]; then
              echo "Failed to extract session ID from comment: $session_comment"
              exit 1
            fi
            
            # 既存セッションがある場合でも、まず状態をチェック
            session_status=$(check_session_status "$session_id")
            if [ "$session_status" = "exited" ] || [ "$session_status" = "completed" ]; then
              echo "Previous session has completed. Creating new session..."
              create_session "$instructions"
            else
              update_session "$session_id" "$instructions"
            fi
          fi
          
  slack-notification:
    runs-on: ubuntu-latest
    needs: code-review
    if: always() && !contains(github.event.pull_request.body, 'skip-review')
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Get Devin session results
        id: get-results
        run: |
          echo "Getting Devin session results..."
          
          # Webhook URLの存在確認
          if [ -z "$SLACK_WEBHOOK_URL" ]; then
            echo "SLACK_WEBHOOK_URL is not set"
            exit 1
          fi
          
          # セッションIDの取得を修正 - 最新のコメントを取得
          session_comment=$(gh pr view "${{ github.event.number }}" --json comments --jq '.comments[] | select(.body | contains("Devin Session ID:")) | .body' | tail -n 1)
          session_id=$(echo "$session_comment" | sed -n 's/.*Devin Session ID: \([^ ]*\).*/\1/p')
          
          if [ -z "$session_id" ]; then
            echo "Failed to extract session ID"
            echo "results=Devin session not found or failed to start" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Found session ID: $session_id"
          
          # セッション結果の取得（より長い待機時間とより詳細な状態チェック）
          max_attempts=20
          wait_time=30
          
          for i in $(seq 1 $max_attempts); do
            echo "Attempt $i/$max_attempts to get session results..."
            
            # セッション状態を確認
            status_response=$(curl -s -X GET "https://api.devin.ai/v1/session/${session_id}" \
              -H "Authorization: Bearer ${{ secrets.DEVIN_API_KEY }}")
            session_status=$(echo "$status_response" | jq -r '.status // "unknown"')
            echo "Session status: $session_status"
            
            # メッセージを取得
            response=$(curl -s -X GET "https://api.devin.ai/v1/session/${session_id}/messages" \
              -H "Authorization: Bearer ${{ secrets.DEVIN_API_KEY }}")
            
            if [ $? -eq 0 ] && [ -n "$response" ]; then
              # メッセージ数とコンテンツをチェック
              message_count=$(echo "$response" | jq '.messages | length' 2>/dev/null || echo "0")
              echo "Found $message_count messages"
              
              if [ "$message_count" -gt 1 ]; then
                # 最後のメッセージの内容とauthorをチェック
                last_message=$(echo "$response" | jq -r '.messages[-1].content // ""')
                last_author=$(echo "$response" | jq -r '.messages[-1].author // ""')
                
                echo "Last message author: $last_author"
                echo "Last message length: ${#last_message}"
                echo "Last message preview: ${last_message:0:100}..."
                
                # Devinからの実質的な回答があるかチェック
                # 1. authorがdevinであること
                # 2. メッセージが十分長いこと（200文字以上）
                # 3. 明らかなエラーメッセージでないこと
                if [ "$last_author" = "devin" ] && [ ${#last_message} -gt 200 ] && \
                   [[ ! "$last_message" =~ "エラー"|"error"|"failed"|"問題が発生" ]]; then
                  echo "Found meaningful response from Devin (${#last_message} characters)"
                  break
                fi
                
                # セッションが完了しているが、まだ十分な回答がない場合
                if [ "$session_status" = "completed" ] || [ "$session_status" = "exited" ]; then
                  if [ ${#last_message} -gt 50 ]; then
                    echo "Session completed with some response (${#last_message} characters)"
                    break
                  else
                    echo "Session completed but response too short, waiting a bit more..."
                  fi
                fi
              fi
            fi
            
            # 待機時間の調整
            if [ "$session_status" = "completed" ] || [ "$session_status" = "exited" ]; then
              # セッションが完了している場合は短い間隔で再試行
              echo "Session completed/exited, checking again in 10 seconds..."
              sleep 10
            elif [ "$session_status" = "running" ] || [ "$session_status" = "active" ]; then
              # セッションが実行中の場合は長めに待機
              echo "Session still running, waiting $wait_time seconds..."
              sleep $wait_time
            else
              # 不明な状態の場合は中間の待機時間
              echo "Unknown session status, waiting 15 seconds..."
              sleep 15
            fi
            
            # 最後の試行の場合
            if [ $i -eq $max_attempts ]; then
              echo "Reached maximum attempts ($max_attempts)"
              if [ -n "$last_message" ] && [ ${#last_message} -gt 20 ]; then
                echo "Using last available message"
                break
              else
                echo "No meaningful response found after $max_attempts attempts"
                echo "Session status: $session_status"
                echo "Message count: $message_count"
                echo "results=Devin AI分析が完了していません。セッション状態: $session_status。しばらく後に再度確認してください。" >> $GITHUB_OUTPUT
                exit 0
              fi
            fi
          done
          
          # 最適なメッセージを選択（Devinからの最長の回答を優先）
          results=$(echo "$response" | jq -r '
            .messages 
            | map(select(.author == "devin" and .content != null and (.content | length) > 50))
            | if length > 0 then 
                sort_by(.content | length) | .[-1].content
              else 
                (.messages | map(select(.content != null and (.content | length) > 20)) | if length > 0 then .[-1].content else "応答を処理中です。" end)
              end
          ')
          
          echo "Final results length: ${#results}"
          echo "Results preview: ${results:0:200}..."
          
          # 結果が空または短すぎる場合のフォールバック
          if [ -z "$results" ] || [ ${#results} -lt 20 ]; then
            results="Devin AIからの詳細な分析結果を待機中です。セッション ID: $session_id"
          fi
          
          # マルチライン出力の安全な設定
          {
            echo "results<<EOF"
            echo "$results"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Send to Slack
        run: |
          echo "Sending notification to Slack..."
          
          # JSONペイロードを安全に作成
          jq -n \
            --arg text "Devin AI Code Review Results for PR #${{ github.event.number }}" \
            --arg pr_url "${{ github.event.pull_request.html_url }}" \
            --arg pr_number "${{ github.event.number }}" \
            --arg pr_title "${{ github.event.pull_request.title }}" \
            --arg results "${{ steps.get-results.outputs.results }}" \
            '{
              text: $text,
              blocks: [
                {
                  type: "section",
                  text: {
                    type: "mrkdwn",
                    text: ("*PR:* <" + $pr_url + "|#" + $pr_number + " - " + $pr_title + ">")
                  }
                },
                {
                  type: "section",
                  text: {
                    type: "mrkdwn",
                    text: ("*Devin AI Review:*\n```\n" + $results + "\n```")
                  }
                }
              ]
            }' > slack_payload.json
          
          # Slack APIへの送信
          response=$(curl -s -w "\n%{http_code}" -X POST \
            -H 'Content-type: application/json' \
            --data @slack_payload.json \
            "$SLACK_WEBHOOK_URL")
          
          http_status=$(echo "$response" | tail -n 1)
          
          if [ "$http_status" -eq 200 ]; then
            echo "Slack notification sent successfully"
          else
            echo "Failed to send Slack notification. Status: $http_status"
            echo "Response: $(echo "$response" | sed '$d')"
            exit 1
          fi