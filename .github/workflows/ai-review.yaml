name: Devin Code Review

on:
  pull_request:
    types: [opened]  # 初回PR作成時のみ自動実行
    branches: ['**']

  issue_comment:
    types: [created]   # @devin-ai-review コメントで手動トリガー
  
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: false
        default: ''

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  code-review:
    runs-on: ubuntu-latest
    env:
      DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      FULL_INSTRUCTIONS: |
        指示: ${{ github.repository }} の Pull Request #${{ github.event.number }} (https://github.com/${{ github.repository }}/pull/${{ github.event.number }})をレビューしてください。最初の実行（セッション未作成）では必ずPR全体を通読してサマリ（変更の要約、目的、影響範囲）を作成し、その上でコードレビューを行ってください。レビューは日本語で行ってください。出力には必須で次のタイトルを含めてください: "${{ github.repository }} PR #${{ github.event.number }} レビュー結果（全体）"。
        
        **重要**: 確認メッセージや「承知いたしました」などの返答は不要です。直接レビュー結果を出力してください。
        
        制約・形式（必須）:
        - **重要**: このPRで変更されたファイル（Files changed）のみをレビュー対象とし、変更されていないファイルやコードは一切レビューしないでください。
        - 評価は簡潔に、要点を最初に述べること。
        - 指摘にはラベルプレフィックスを付けること。使用するラベル（少なくともこれらを利用）: [Issue]（重大なバグや動作不良）, [Suggestion]（機能改善提案）, [Nit]（軽微なスタイル/表記修正）, [Question]（不明点・確認事項）.
        - **重要**: レビュー項目は最大5個までとし、High/Medium優先度の重要な指摘のみに絞ってください。軽微な[Nit]や[Question]は最小限に留めてください。
        - 各指摘は「ファイルパス:行番号（可能なら）」、短い説明、必要なら修正例/パッチ案 を含める。
        - 重要度は High / Medium / Low のいずれかでタグ付けしてください。
        - サマリ部分では、変更の目的、影響範囲、テストの要否を明記してください。
        
        **重要**: 個別のコードレビュー指摘は以下の形式で必ず囲んでください:
        ```
        ###REVIEW_START_1###
        [Issue] ファイルパス:行番号 - 指摘内容
        重要度: High/Medium/Low
        
        **現在のコード:**
        ```言語名
        実際のコード行（問題のある部分）
        ```
        
        詳細説明...
        
        **修正案:**
        ```言語名
        修正後のコード例
        ```
        ###REVIEW_END_1###
        ```
        
        各レビュー項目は連番（1, 2, 3...）を使用し、START と END で必ず囲むこと。
        必ず「現在のコード」セクションで実際のコードを引用し、「修正案」セクションで改善案を示すこと。
        
        出力構造（例）:
        1) 見出し（必須）: "レビュー結果（全体）"
        2) サマリ（3-5行程度）
        3) 個別レビュー項目（それぞれ ###REVIEW_START_N### と ###REVIEW_END_N### で囲む）
        4) 最後に総評と優先度の高い修正リスト
      INCREMENTAL_INSTRUCTIONS: |
        指示: ${{ github.repository }} の Pull Request #${{ github.event.number }} をレビューしてください。**重要**: このPRで変更されたファイル（Files changed）のみを対象としてコードレビューを行ってください。変更されていないファイルやコードはレビュー対象外です。PRの「Files changed」タブで確認できる変更されたファイルのみをレビューしてください。レビューは日本語で行ってください。出力には必須で次のタイトルを含めてください: "レビュー結果（更新）"。
        
        **重要**: 確認メッセージや「承知いたしました」などの返答は不要です。直接レビュー結果を出力してください。
        
        制約・形式（必須）:
        - **重要**: このPRで変更されたファイル（Files changed）のみをレビュー対象とし、変更されていないファイルやコードは一切レビューしないでください。
        - 評価は簡潔に、要点を最初に述べること。
        - 指摘にはラベルプレフィックスを付けること。使用するラベル: [Issue]（重大なバグや動作不良）, [Suggestion]（機能改善提案）, [Nit]（軽微なスタイル/表記修正）, [Question]（不明点・確認事項）.
        - **重要**: レビュー項目は最大3個までとし、High/Medium優先度の重要な指摘のみに絞ってください。軽微な[Nit]や[Question]は最小限に留めてください。
        - 各指摘は「ファイルパス:行番号（可能なら）」、短い説明、必要なら修正例/パッチ案 を含める。
        - 重要度は High / Medium / Low のいずれかでタグ付けしてください。
        
        **重要**: 個別のコードレビュー指摘は以下の形式で必ず囲んでください:
        ```
        ###REVIEW_START_1###
        [Issue] ファイルパス:行番号 - 指摘内容
        重要度: High/Medium/Low
        
        **現在のコード:**
        ```言語名
        実際のコード行（問題のある部分）
        ```
        
        詳細説明...
        
        **修正案:**
        ```言語名
        修正後のコード例
        ```
        ###REVIEW_END_1###
        ```
        
        各レビュー項目は連番（1, 2, 3...）を使用し、START と END で必ず囲むこと。
        必ず「現在のコード」セクションで実際のコードを引用し、「修正案」セクションで改善案を示すこと。
        
        出力構造（例）:
        1) 見出し（必須）: "レビュー結果（更新）"
        2) 変更点の要約（1-3行）
        3) 個別レビュー項目（それぞれ ###REVIEW_START_N### と ###REVIEW_END_N### で囲む）
        4) 必要な修正案と優先度
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref || github.ref }}

      - name: Check if triggered by comment
        id: check-comment
        run: |
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            body="${{ github.event.comment.body }}"
            echo "Comment body: $body"
            if echo "$body" | grep -q "@devin-ai-review"; then
              echo "trigger=true" >> $GITHUB_OUTPUT
            else
              echo "trigger=false" >> $GITHUB_OUTPUT
            fi
          else
            # 对于 pull_request 事件（opened/synchronize）默认执行
            echo "trigger=true" >> $GITHUB_OUTPUT
          fi

      - name: Devin review combined
        if: steps.check-comment.outputs.trigger == 'true' && !contains(github.event.pull_request.body, 'skip-review')
        run: |
          echo "Starting Devin review process..."
          
          # GitHub CLIが利用可能か確認
          if ! command -v gh &> /dev/null; then
            echo "GitHub CLI not found"
            exit 1
          fi
          
          # PR番号の設定と確認
          echo "Event name: ${{ github.event_name }}"
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
            echo "Pull request event: PR #$PR_NUMBER"
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            PR_NUMBER="${{ github.event.issue.number }}"
            echo "Issue comment event: Issue/PR #$PR_NUMBER"
            # issue_commentイベントでPRかどうか確認
            if [ "${{ github.event.issue.pull_request }}" = "" ]; then
              echo "This comment is on an issue, not a pull request. Exiting."
              exit 0
            fi
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
            echo "Manual trigger: PR #$PR_NUMBER"
          else
            echo "Unsupported event type: ${{ github.event_name }}"
            exit 1
          fi
          
          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
            echo "PR number not available. This workflow is designed for Pull Requests."
            echo "Event: ${{ github.event_name }}, Branch: ${{ github.ref_name }}"
            exit 1
          fi
          
          echo "Using PR number: $PR_NUMBER"
          
          # セッションIDの抽出を修正（最新のコメントを取得）
          session_comment=$(gh pr view "$PR_NUMBER" --json comments --jq '.comments[] | select(.body | contains("Devin Session ID:")) | .body' | head -n 1)

          check_session_status() {
            local session_id="$1"
            echo "Checking session status: $session_id"
            local response
            response=$(curl -s -X GET "https://api.devin.ai/v1/session/${session_id}" \
              -H "Authorization: Bearer $DEVIN_API_KEY")
            
            local status
            status=$(echo "$response" | jq -r '.status // "unknown"')
            echo "Session status: $status"
            echo "$status"
          }

          get_session_snapshot() {
            local session_id="$1"
            echo "Getting snapshot for session: $session_id"
            local response
            response=$(curl -s -X GET "https://api.devin.ai/v1/session/${session_id}" \
              -H "Authorization: Bearer $DEVIN_API_KEY")
            
            local snapshot_id
            snapshot_id=$(echo "$response" | jq -r '.snapshot_id // empty')
            if [ -n "$snapshot_id" ] && [ "$snapshot_id" != "null" ]; then
              echo "Found snapshot ID: $snapshot_id"
              echo "$snapshot_id"
            else
              echo "No snapshot ID found for session $session_id"
              echo ""
            fi
          }

          get_latest_session_info() {
            echo "Searching for latest session from PR comments..."
            local latest_session_comment
            latest_session_comment=$(gh pr view "$PR_NUMBER" --json comments --jq '.comments[] | select(.body | contains("Devin Session ID:")) | .body' | tail -n 1)
            
            if [ -n "$latest_session_comment" ]; then
              local session_id
              session_id=$(echo "$latest_session_comment" | sed -n 's/.*Devin Session ID: \([^ ]*\).*/\1/p')
              echo "Found latest session: $session_id"
              echo "$session_id"
            else
              echo "No previous session found in PR comments"
              echo ""
            fi
          }

          create_session() {
            local prompt="$1"
            local snapshot_id="$2"  # オプショナルなsnapshotパラメータ
            echo "Creating new Devin session..."
            local escaped_prompt=$(echo "$prompt" | jq -R -s .)
            local response
            
            # リクエストボディを構築（snapshot_idがある場合は含める）
            local request_body
            if [ -n "$snapshot_id" ] && [ "$snapshot_id" != "" ]; then
              echo "Using snapshot ID to inherit context: $snapshot_id"
              request_body=$(jq -n \
                --arg prompt "$prompt" \
                --arg snapshot "$snapshot_id" \
                '{
                  "prompt": $prompt,
                  "snapshot_id": $snapshot,
                  "idempotent": true
                }')
            else
              echo "Creating fresh session without context inheritance"
              request_body=$(jq -n \
                --arg prompt "$prompt" \
                '{
                  "prompt": $prompt,
                  "idempotent": true
                }')
            fi
            
            # idempotentパラメータを使用して、同一プロンプトでの重複セッション作成を防止
            response=$(curl -s -w "\n%{http_code}" -X POST "https://api.devin.ai/v1/sessions" \
              -H "Authorization: Bearer $DEVIN_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{
                \"prompt\": $escaped_prompt,
                \"playbook_id\": \"playbook-f5454a9ea542482e8805ec43bf8ab201\"
              }")
            local http_status
            http_status=$(echo "$response" | tail -n 1)
            echo "Request info: status code = $http_status"
            if [ "$http_status" -ne 200 ]; then
              echo "Failed to create session: $response"
              exit 1
            fi
            local http_body
            http_body=$(echo "$response" | sed '$d')
            local session_id
            session_id=$(echo "$http_body" | jq -r '.session_id')
            if [ -z "$session_id" ] || [ "$session_id" = "null" ]; then
              echo "Failed to get session ID, body = $http_body"
              exit 1
            fi
            echo "Session created with ID: $session_id"
            gh pr comment "${{ github.event.number }}" --body "Devin Session ID: $session_id"
          }

          update_session() {
            local session_id="$1"
            local message="$2"
            echo "Updating Devin session: $session_id"
            
            # まずセッションの状態を確認
            local session_status
            session_status=$(check_session_status "$session_id")
            
            if [ "$session_status" = "exited" ] || [ "$session_status" = "completed" ]; then
              echo "Session has already exited/completed. Will use existing results."
              return 0
            fi
            
            local escaped_message=$(echo "$message" | jq -R -s .)
            local response
            response=$(curl -s -w "\n%{http_code}" -X POST "https://api.devin.ai/v1/session/${session_id}/message" \
              -H "Authorization: Bearer $DEVIN_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{\"message\": $escaped_message}")
            local http_status
            http_status=$(echo "$response" | tail -n 1)
            echo "Request info: status code = $http_status"
            if [ "$http_status" -ne 200 ]; then
              echo "Failed to update session: $response"
              # セッションが既に終了している場合は既存結果を使用
                if [[ "$response" == *"already exited"* ]] || [[ "$response" == *"Devin session already exited"* ]]; then
                echo "Session already exited, will use existing results."
                return 0
              fi
              exit 1
            fi
            echo "Session updated successfully"
          }

          update_session_with_retry() {
            local session_id="$1"
            local message="$2"
            local max_attempts=3
            local wait_time=30
            
            echo "Updating Devin session with retry logic: $session_id"
            
            for attempt in $(seq 1 $max_attempts); do
              echo "Attempt $attempt/$max_attempts to update session..."
              
              # まずセッションの状態を確認
              local session_status
              session_status=$(check_session_status "$session_id")
              
              if [ "$session_status" = "exited" ] || [ "$session_status" = "completed" ]; then
                echo "Session has already exited/completed. Will use existing results."
                return 0
              fi
              
              # 初期化中の場合は待機
              if [ "$session_status" = "initializing" ] || [ "$session_status" = "starting" ]; then
                echo "Session is still initializing (status: $session_status), waiting ${wait_time}s..."
                sleep $wait_time
                continue
              fi
              
              local escaped_message=$(echo "$message" | jq -R -s .)
              local response
              response=$(curl -s -w "\n%{http_code}" -X POST "https://api.devin.ai/v1/session/${session_id}/message" \
                -H "Authorization: Bearer $DEVIN_API_KEY" \
                -H "Content-Type: application/json" \
                -d "{\"message\": $escaped_message}")
              local http_status
              http_status=$(echo "$response" | tail -n 1)
              echo "Request info: status code = $http_status"
              
              if [ "$http_status" -eq 200 ]; then
                echo "Session updated successfully"
                return 0
              elif [ "$http_status" -eq 400 ]; then
                local http_body
                http_body=$(echo "$response" | sed '$d')
                echo "400 error: $http_body"
                
                # 初期化エラーの場合は再試行
                if [[ "$http_body" == *"still initializing"* ]] || [[ "$http_body" == *"initializing"* ]]; then
                  echo "Session still initializing, waiting ${wait_time}s before retry..."
                  sleep $wait_time
                  continue
                fi
                
                # 既に終了している場合
                if [[ "$http_body" == *"already exited"* ]] || [[ "$http_body" == *"Devin session already exited"* ]]; then
                  echo "Session already exited, will use existing results."
                  return 0
                fi
                
                echo "Unhandled 400 error: $http_body"
                exit 1
              else
                echo "Failed to update session: $response"
                if [ $attempt -lt $max_attempts ]; then
                  echo "Waiting ${wait_time}s before retry..."
                  sleep $wait_time
                else
                  echo "Max attempts reached, giving up"
                  exit 1
                fi
              fi
            done
          }

          # 指示文を環境変数から取得（playbook_idの代わりにidempotentパラメータを使用）

          # 智能会话管理：尝试继承现有会话或从快照创建新会话
          if [ -z "$session_comment" ]; then
            # 没有找到现有会话，尝试查找之前的会话快照
            echo "No existing session found, looking for previous sessions to inherit from..."
            previous_session=$(get_latest_session_info)
            
            if [ -n "$previous_session" ] && [ "$previous_session" != "" ]; then
              echo "Found previous session: $previous_session"
              previous_status=$(check_session_status "$previous_session")
              echo "Previous session status: $previous_status"
              
              # 如果之前的会话已完成或退出，尝试获取其快照
              if [ "$previous_status" = "completed" ] || [ "$previous_status" = "exited" ] || [ "$previous_status" = "finished" ]; then
                snapshot_id=$(get_session_snapshot "$previous_session")
                if [ -n "$snapshot_id" ] && [ "$snapshot_id" != "" ]; then
                  echo "Creating new session with inherited context from snapshot: $snapshot_id"
                  create_session "$FULL_INSTRUCTIONS" "$snapshot_id"
                else
                  echo "No snapshot available, creating fresh session"
                  create_session "$FULL_INSTRUCTIONS"
                fi
              else
                echo "Previous session still active ($previous_status), creating fresh session"
                create_session "$FULL_INSTRUCTIONS"
              fi
            else
              echo "No previous sessions found, creating fresh session for full PR review"
              create_session "$FULL_INSTRUCTIONS"
            fi
            
            # create_session 内で export SESSION_ID しているはずなので読み込む
            if [ -n "$SESSION_ID" ]; then
              echo "SESSION_ID set to $SESSION_ID from create_session"
            else
              # 保险: 再取得を試みる
              echo "SESSION_ID not exported, trying to re-read from PR comments..."
              session_comment=$(gh pr view "$PR_NUMBER" --json comments --jq '.comments[] | select(.body | contains("Devin Session ID:")) | .body' | head -n 1)
              SESSION_ID=$(echo "$session_comment" | sed -n 's/.*Devin Session ID: \([^ ]*\).*/\1/p')
              export SESSION_ID
            fi
          else
            # 既存セッションがある場合
            session_id=$(echo "$session_comment" | sed -n 's/.*Devin Session ID: \([^ ]*\).*/\1/p')
            if [ -z "$session_id" ]; then
              echo "Failed to extract session ID from comment: $session_comment"
              exit 1
            fi
            export SESSION_ID="$session_id"
            
            session_status=$(check_session_status "$SESSION_ID")
            echo "Existing session status: $session_status"
            
            # 初回PR作成時は既存セッションがあっても新しいセッションを作成
            echo "Creating new session for initial PR review..."
            create_session "$FULL_INSTRUCTIONS"
          fi
          
          # 初回PR作成時は全体レビューのみ実行（追加のコミットレビューは不要）
          echo "Initial PR review completed. For additional reviews, use @devin-ai-review comment."
          
      - name: Set job outputs
        run: |
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "session_id=$SESSION_ID" >> $GITHUB_OUTPUT
          
  slack-notification:
    runs-on: ubuntu-latest
    needs: code-review
    if: success() && !contains(github.event.pull_request.body, 'skip-review')
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Get Devin session results
        id: get-results
        run: |
          echo "Getting Devin session results..."
          
          if [ -z "$SLACK_WEBHOOK_URL" ]; then
            echo "SLACK_WEBHOOK_URL is not set"
            exit 1
          fi
          
          # 最新のセッションIDを取得
          session_comment=$(gh pr view "${{ github.event.number }}" --json comments --jq '.comments[] | select(.body | contains("Devin Session ID:")) | .body' | tail -n 1)
          session_id=$(echo "$session_comment" | sed -n 's/.*Devin Session ID: \([^ ]*\).*/\1/p')
          
          if [ -z "$session_id" ]; then
            echo "Failed to extract session ID"
            echo "results=Devin session not found" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Found session ID: $session_id"
          
          # 3回の試行、各60秒待機
          max_attempts=3
          wait_time=60
          
          for i in $(seq 1 $max_attempts); do
            echo "Attempt $i/$max_attempts..."
            
            # メッセージを取得
            response=$(curl -s -X GET "https://api.devin.ai/v1/session/${session_id}" \
              -H "Authorization: Bearer ${{ secrets.DEVIN_API_KEY }}")
            
            if [ $? -eq 0 ] && [ -n "$response" ]; then
              echo "Response received, checking for messages..."
              
              # messagesフィールドが存在するかチェック
              has_messages=$(echo "$response" | jq -r 'has("messages")' 2>/dev/null || echo "false")
              
              if [ "$has_messages" = "true" ]; then
                # devin_messageタイプの最後のメッセージを取得
                last_devin_message=$(echo "$response" | jq -r '
                  .messages 
                  | map(select(.type == "devin_message" and .message != null and (.message | length) > 100))
                  | if length > 0 then .[-1].message else null end
                ' 2>/dev/null)
                
                if [ "$last_devin_message" != "null" ] && [ -n "$last_devin_message" ] && [ ${#last_devin_message} -gt 100 ]; then
                  echo "Found devin message (${#last_devin_message} characters)"
                  
                  # レビュー結果の標題が含まれているかチェック（簡化された検出）
                  if [[ "$last_devin_message" =~ "レビュー結果" ]]; then
                    echo "Found complete review result with レビュー結果 title"
                    break
                  elif [[ "$last_devin_message" =~ "承知いたしました" ]] || [[ "$last_devin_message" =~ "確認いたします" ]] || [[ "$last_devin_message" =~ "レビューいたします" ]]; then
                    echo "Found confirmation message, waiting for actual review results..."
                    echo "Message preview: ${last_devin_message:0:100}..."
                  else
                    echo "Found devin message but missing レビュー結果 title, will continue waiting..."
                    echo "Message preview: ${last_devin_message:0:100}..."
                  fi
                else
                  echo "No valid devin message found yet"
                fi
              else
                echo "No messages field found in response"
              fi
            else
              echo "Failed to get response or empty response"
            fi
            
            # 最後の試行でない場合は待機
            if [ $i -lt $max_attempts ]; then
              echo "Waiting $wait_time seconds before next attempt..."
              sleep $wait_time
            else
              echo "Max attempts reached"
              # 最後でも使える回答があれば使用
              if [ "$last_devin_message" != "null" ] && [ -n "$last_devin_message" ] && [ ${#last_devin_message} -gt 50 ]; then
                echo "Using best available devin message"
                break
              fi
            fi
          done
          
          # 最終的なメッセージを設定
          if [ "$last_devin_message" != "null" ] && [ -n "$last_devin_message" ]; then
            results="$last_devin_message"
          else
            # フォールバック: 最後のdevin_messageを取得（条件を緩和）
            results=$(echo "$response" | jq -r '
              if has("messages") then
                .messages 
                | map(select(.type == "devin_message" and .message != null and (.message | contains("レビュー結果"))))
                | if length > 0 then .[-1].message else "Devin分析中... セッションID: '"$session_id"'" end
              else
                "Devin分析中... セッションID: '"$session_id"'"
              end
            ' 2>/dev/null || echo "Devin分析中... セッションID: $session_id")
          fi
          
          echo "Final results length: ${#results}"
          echo "Results preview: ${results:0:200}..."
          
          # 結果が空またはnullの場合のフォールバック
          if [ -z "$results" ] || [ "$results" = "null" ]; then
            results="Devin分析中... セッションID: $session_id"
          fi
          
          {
            echo "results<<EOF"
            echo "$results"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Parse and post individual review comments
        run: |
          echo "Parsing Devin review results for individual comments..."
          
          # Devinの結果から個別のレビュー項目を抽出
          review_content="${{ steps.get-results.outputs.results }}"
          
          if [ -z "$review_content" ] || [ "$review_content" = "null" ]; then
            echo "No review content available to parse"
            exit 0
          fi
          
          # レビュー項目を抽出する関数
          extract_review_items() {
            local content="$1"
            local counter=1
            
            echo "Extracting individual review items..."
            echo "Content length: ${#content}"
            echo "Content preview (first 500 chars):"
            echo "${content:0:500}..."
            
            # ###REVIEW_START_N### から ###REVIEW_END_N### までの内容を抽出
            while true; do
              # 各レビュー項目の開始と終了を検索
              start_marker="###REVIEW_START_${counter}###"
              end_marker="###REVIEW_END_${counter}###"
              
              echo "Looking for review item $counter..."
              echo "Start marker: $start_marker"
              echo "End marker: $end_marker"
              
              # awk を使った安全な抽出方法（マーカー行も含める）
              # 変数を安全にエスケープして使用
              review_item=$(echo "$content" | awk -v start="$start_marker" -v end="$end_marker" '
                $0 ~ start { flag=1; print; next }
                $0 ~ end { flag=0; print; next }
                flag { print }
              ')
              
              if [ -z "$review_item" ]; then
                echo "No more review items found. Total extracted: $((counter-1))"
                break
              fi
              
              echo "Found review item $counter:"
              echo "--- Review Item $counter ---"
              # 安全に内容を表示（最初の200文字のみ）
              echo "$review_item" | head -c 200
              echo "..."
              echo "--- End Review Item $counter ---"
              
              # PR コメントを投稿
              echo "Posting review comment #$counter"
              
              # 一時ファイルを使用してコメント本文を作成
              temp_comment="/tmp/review_comment_${counter}.md"
              
              # レビュー項目からタイトルを抽出（最初の行から）
              review_title=$(echo "$review_item" | head -n 1 | sed 's/^###REVIEW_START_[0-9]*###[[:space:]]*//' 2>/dev/null || echo "")
              
              # 安全にコメントファイルを作成
              {
                echo "$review_item"
                echo ""
                echo "---"
                echo "*Posted by Devin AI Code Review Bot*"
              } > "$temp_comment"
              
              # PRコメントを投稿
              if ! gh pr comment "${{ needs.code-review.outputs.pr_number }}" --body-file "$temp_comment"; then
                echo "Error: Failed to post review comment #$counter"
                echo "Comment content:"
                cat "$temp_comment"
                echo "Continuing with next review item..."
              else
                echo "Successfully posted review comment #$counter"
              fi
              
              # 一時ファイルを削除
              rm -f "$temp_comment"
              
              # 次のレビュー項目へ
              counter=$((counter + 1))
              
              # 安全のため最大50項目まで
              if [ $counter -gt 50 ]; then
                echo "Maximum review items limit (50) reached"
                break
              fi
              
              # 各コメント投稿間に少し待機
              sleep 2
            done
          }
          
          # レビュー項目の抽出と投稿を実行
          extract_review_items "$review_content"

      - name: Send to Slack
        run: |
          echo "Sending notification to Slack..."
          
          # レビュー結果から主要な情報を抽出（安全に処理）
          title=$(echo "${{ steps.get-results.outputs.results }}" | head -n 1 | sed 's/^# *//' | sed 's/^## *//' 2>/dev/null || echo "Devin AI Review Results")
          
          # PR情報を取得
          PR_URL="https://github.com/${{ github.repository }}/pull/${{ needs.code-review.outputs.pr_number }}"
          PR_NUMBER="${{ needs.code-review.outputs.pr_number }}"
          PR_TITLE="${{ needs.code-review.outputs.pr_title }}"
          REPO="${{ github.repository }}"
          
          echo "PR URL: $PR_URL"
          echo "PR Number: $PR_NUMBER"
          echo "PR Title: $PR_TITLE"
          echo "Repository: $REPO"
          
          # 結果を安全に処理（最初の500文字のみ）
          results_preview=$(echo "${{ steps.get-results.outputs.results }}" | head -c 500 2>/dev/null || echo "Review completed successfully")
          
          # JSONペイロードを美観に作成
          jq -n \
            --arg text "Devin AI Code Review Completed" \
            --arg pr_url "$PR_URL" \
            --arg pr_number "$PR_NUMBER" \
            --arg pr_title "$PR_TITLE" \
            --arg repo "$REPO" \
            --arg results "$results_preview" \
            --arg title "$title" \
            '{
              text: $text,
              attachments: [
                {
                  color: "good",
                  blocks: [
                    {
                      type: "header",
                      text: {
                        type: "plain_text",
                        text: "Devin AI Code Review",
                        emoji: true
                      }
                    },
                    {
                      type: "section",
                      fields: [
                        {
                          type: "mrkdwn",
                          text: ("*Repository:*\n" + $repo)
                        },
                        {
                          type: "mrkdwn",
                          text: ("*PR Number:*\n#" + $pr_number)
                        }
                      ]
                    },
                    {
                      type: "section",
                      text: {
                        type: "mrkdwn",
                        text: ("*Pull Request:*\n<" + $pr_url + "|" + $pr_title + ">")
                      }
                    },
                    {
                      type: "divider"
                    },
                    {
                      type: "section",
                      text: {
                        type: "mrkdwn",
                        text: "*📋 Review Results:*"
                      }
                    },
                    {
                      type: "section",
                      text: {
                        type: "mrkdwn",
                        text: $results
                      }
                    },
                    {
                      type: "context",
                      elements: [
                        {
                          type: "mrkdwn",
                          text: ("🔗 <" + $pr_url + "|View Pull Request> | 🤖 Powered by Devin AI")
                        }
                      ]
                    }
                  ]
                }
              ]
            }' > slack_payload.json
          
          # Slack APIへの送信
          response=$(curl -s -w "\n%{http_code}" -X POST \
            -H 'Content-type: application/json' \
            --data @slack_payload.json \
            "$SLACK_WEBHOOK_URL")
          
          http_status=$(echo "$response" | tail -n 1)
          
          if [ "$http_status" -eq 200 ]; then
            echo "Slack notification sent successfully"
          else
            echo "Failed to send Slack notification. Status: $http_status"
            echo "Response: $(echo "$response" | sed '$d')"
            exit 1
          fi
